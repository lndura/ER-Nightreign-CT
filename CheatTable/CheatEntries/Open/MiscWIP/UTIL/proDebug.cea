{  Author: Dasaav
}
{$lua}
if syntaxcheck then return end
[ENABLE]
local function getTextSection()
    local base = getAddress(process)
    if not base then return nil end
    local header = base + readInteger(base + 0x3C)
    local sectionSize = 0x28
    local sectionNum = readShortInteger(header + 0x6);
    if sectionNum <= 0 then
        return nil
    end
    local first = header + readShortInteger(header + 0x14) + 0x18
    local last = first + sectionNum * sectionSize
    for section = first, last - sectionSize, sectionSize do
        if readString(section, 8) == ".text" then
            local addr = base + readInteger(section + 0xC);
            local size = readInteger(section + 0x8)
            return {addr = addr, size = size}
        end
    end
    return nil
end

local function stubFunctionPointer(ptr)
    local addr = getAddress(ptr)
    local fn = readPointer(addr + readInteger(addr + 3) + 7)
    writeByte(fn, 0xC3) -- ret
end

local function proDebug()
    local textSection = getTextSection()
    if textSection == nil then return end
    local memscan = createMemScan(nil)
    createFoundList(memscan)
    local success, err = pcall(function (scan, text)
        local pattern = "48 8B 05 ?? ?? ?? ?? FF D0"
        scan.firstScan(soExactValue, vtByteArray, rtRounded, pattern, nil, text.addr, text.addr + text.size, "", fsmNotAligned, nil, true, true, false, false)
        scan.waitTillDone()
        local results = scan.getAttachedFoundlist()
        if results then
            results.initialize()
            local total = results.getCount()
            for i = 0, total - 1 do
                stubFunctionPointer(results.getAddress(i))
            end
            printf("A total of %d functions have been stubbed", total)
            results.deinitialize()
        end
    end, memscan, textSection)
    memscan.destroy()
    if not success then
        print("proDebug error:")
        pfError(err)
    else
        debugProcess()
    end
end

proDebug()

[DISABLE]
