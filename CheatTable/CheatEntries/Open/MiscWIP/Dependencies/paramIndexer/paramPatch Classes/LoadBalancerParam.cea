{$lua}
if syntaxcheck then return end
[enable]
LoadBalancerParam = {}
function LoadBalancerParam:new(id_or_all, patchName)
    return paramPatcher(self, "LoadBalancerParam", 0x51, id_or_all, patchName)
end



function LoadBalancerParam:setLowerFpsThreshold(value)
    return self:setF32(0x00, value)
end
function LoadBalancerParam:getLowerFpsThreshold(value)
    return self:getF32(0x00, value)
end

function LoadBalancerParam:setUpperFpsThreshold(value)
    return self:setF32(0x04, value)
end
function LoadBalancerParam:getUpperFpsThreshold(value)
    return self:getF32(0x04, value)
end

function LoadBalancerParam:setLowerFpsContinousCount(value)
    return self:setU32(0x08, value)
end
function LoadBalancerParam:getLowerFpsContinousCount(value)
    return self:getU32(0x08, value)
end

function LoadBalancerParam:setUpperFpsContinousCount(value)
    return self:setU32(0x0C, value)
end
function LoadBalancerParam:getUpperFpsContinousCount(value)
    return self:getU32(0x0C, value)
end

function LoadBalancerParam:setDownAfterChangeSleep(value)
    return self:setU32(0x10, value)
end
function LoadBalancerParam:getDownAfterChangeSleep(value)
    return self:getU32(0x10, value)
end

function LoadBalancerParam:setUpAfterChangeSleep(value)
    return self:setU32(0x14, value)
end
function LoadBalancerParam:getUpAfterChangeSleep(value)
    return self:getU32(0x14, value)
end

function LoadBalancerParam:setPostProcessLightShaft(value)
    return self:setU8(0x18, value)
end
function LoadBalancerParam:getPostProcessLightShaft(value)
    return self:getU8(0x18, value)
end

function LoadBalancerParam:setPostProcessBloom(value)
    return self:setU8(0x19, value)
end
function LoadBalancerParam:getPostProcessBloom(value)
    return self:getU8(0x19, value)
end

function LoadBalancerParam:setPostProcessGlow(value)
    return self:setU8(0x1A, value)
end
function LoadBalancerParam:getPostProcessGlow(value)
    return self:getU8(0x1A, value)
end

function LoadBalancerParam:setPostProcessAA(value)
    return self:setU8(0x1B, value)
end
function LoadBalancerParam:getPostProcessAA(value)
    return self:getU8(0x1B, value)
end

function LoadBalancerParam:setPostProcessSSAO(value)
    return self:setU8(0x1C, value)
end
function LoadBalancerParam:getPostProcessSSAO(value)
    return self:getU8(0x1C, value)
end

function LoadBalancerParam:setPostProcessDOF(value)
    return self:setU8(0x1D, value)
end
function LoadBalancerParam:getPostProcessDOF(value)
    return self:getU8(0x1D, value)
end

function LoadBalancerParam:setPostProcessMotionBlur(value)
    return self:setU8(0x1E, value)
end
function LoadBalancerParam:getPostProcessMotionBlur(value)
    return self:getU8(0x1E, value)
end

function LoadBalancerParam:setPostProcessMotionBlurIteration(value)
    return self:setU8(0x1F, value)
end
function LoadBalancerParam:getPostProcessMotionBlurIteration(value)
    return self:getU8(0x1F, value)
end

--dummy8 reserve0[1]

function LoadBalancerParam:setShadowBlur(value)
    return self:setU8(0x21, value)
end
function LoadBalancerParam:getShadowBlur(value)
    return self:getU8(0x21, value)
end

function LoadBalancerParam:setSfxParticleHalf(value)
    return self:setU8(0x22, value)
end
function LoadBalancerParam:getSfxParticleHalf(value)
    return self:getU8(0x22, value)
end

function LoadBalancerParam:setSfxReflection(value)
    return self:setU8(0x23, value)
end
function LoadBalancerParam:getSfxReflection(value)
    return self:getU8(0x23, value)
end

function LoadBalancerParam:setSfxWaterInteraction(value)
    return self:setU8(0x24, value)
end
function LoadBalancerParam:getSfxWaterInteraction(value)
    return self:getU8(0x24, value)
end

function LoadBalancerParam:setSfxGlow(value)
    return self:setU8(0x25, value)
end
function LoadBalancerParam:getSfxGlow(value)
    return self:getU8(0x25, value)
end

function LoadBalancerParam:setSfxDistortion(value)
    return self:setU8(0x26, value)
end
function LoadBalancerParam:getSfxDistortion(value)
    return self:getU8(0x26, value)
end

function LoadBalancerParam:setSftSoftSprite(value)
    return self:setU8(0x27, value)
end
function LoadBalancerParam:getSftSoftSprite(value)
    return self:getU8(0x27, value)
end

function LoadBalancerParam:setSfxLightShaft(value)
    return self:setU8(0x28, value)
end
function LoadBalancerParam:getSfxLightShaft(value)
    return self:getU8(0x28, value)
end

function LoadBalancerParam:setSfxScaleRenderDistanceScale(value)
    return self:setU8(0x29, value)
end
function LoadBalancerParam:getSfxScaleRenderDistanceScale(value)
    return self:getU8(0x29, value)
end

function LoadBalancerParam:setDynamicResolution(value)
    return self:setU8(0x2A, value)
end
function LoadBalancerParam:getDynamicResolution(value)
    return self:getU8(0x2A, value)
end

function LoadBalancerParam:setShadowCascade0ResolutionHalf(value)
    return self:setU8(0x2B, value)
end
function LoadBalancerParam:getShadowCascade0ResolutionHalf(value)
    return self:getU8(0x2B, value)
end

function LoadBalancerParam:setShadowCascade1ResolutionHalf(value)
    return self:setU8(0x2C, value)
end
function LoadBalancerParam:getShadowCascade1ResolutionHalf(value)
    return self:getU8(0x2C, value)
end

function LoadBalancerParam:setChrWetDisablePlayer(value)
    return self:setU8(0x2D, value)
end
function LoadBalancerParam:getChrWetDisablePlayer(value)
    return self:getU8(0x2D, value)
end

function LoadBalancerParam:setChrWetDisableRemotePlayer(value)
    return self:setU8(0x2E, value)
end
function LoadBalancerParam:getChrWetDisableRemotePlayer(value)
    return self:getU8(0x2E, value)
end

function LoadBalancerParam:setChrWetDisableEnemy(value)
    return self:setU8(0x2F, value)
end
function LoadBalancerParam:getChrWetDisableEnemy(value)
    return self:getU8(0x2F, value)
end

function LoadBalancerParam:setDynamicResolutionPercentageMin(value)
    return self:setU8(0x30, value)
end
function LoadBalancerParam:getDynamicResolutionPercentageMin(value)
    return self:getU8(0x30, value)
end

function LoadBalancerParam:setDynamicResolutionPercentageMax(value)
    return self:setU8(0x31, value)
end
function LoadBalancerParam:getDynamicResolutionPercentageMax(value)
    return self:getU8(0x31, value)
end

--dummy8 reserve1[30]
[disable]
LoadBalancerParam = nil
