{$lua}
if syntaxcheck then return end
[enable]
LotResultSmallBaseAndSpot = {}
function LotResultSmallBaseAndSpot:new(id_or_all, patchName)
    return paramPatcher(self, "LotResultSmallBaseAndSpot", 0x1C, id_or_all, patchName)
end



function LotResultSmallBaseAndSpot:setUnknown_0(value)
    return self:setU32(0x00, value)
end
function LotResultSmallBaseAndSpot:getUnknown_0(value)
    return self:getU32(0x00, value)
end

function LotResultSmallBaseAndSpot:setPatternId(value)
    return self:setU32(0x04, value)
end
function LotResultSmallBaseAndSpot:getPatternId(value)
    return self:getU32(0x04, value)
end

function LotResultSmallBaseAndSpot:setAttachId(value)
    return self:setU32(0x08, value)
end
function LotResultSmallBaseAndSpot:getAttachId(value)
    return self:getU32(0x08, value)
end

function LotResultSmallBaseAndSpot:setSmallBaseMapId(value)
    return self:setU32(0x0C, value)
end
function LotResultSmallBaseAndSpot:getSmallBaseMapId(value)
    return self:getU32(0x0C, value)
end

function LotResultSmallBaseAndSpot:setMapIndex(value)
    return self:setU8(0x10, value)
end
function LotResultSmallBaseAndSpot:getMapIndex(value)
    return self:getU8(0x10, value)
end

function LotResultSmallBaseAndSpot:setVariationId(value)
    return self:setU8(0x11, value)
end
function LotResultSmallBaseAndSpot:getVariationId(value)
    return self:getU8(0x11, value)
end

function LotResultSmallBaseAndSpot:setUnknown_0x12(value)
    return self:setU16(0x12, value)
end
function LotResultSmallBaseAndSpot:getUnknown_0x12(value)
    return self:getU16(0x12, value)
end

function LotResultSmallBaseAndSpot:setModifier(value)
    return self:setU32(0x14, value)
end
function LotResultSmallBaseAndSpot:getModifier(value)
    return self:getU32(0x14, value)
end
[disable]
LotResultSmallBaseAndSpot = nil
