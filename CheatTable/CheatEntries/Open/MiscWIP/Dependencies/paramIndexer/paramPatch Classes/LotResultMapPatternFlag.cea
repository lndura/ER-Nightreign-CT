{$lua}
if syntaxcheck then return end
[enable]
LotResultMapPatternFlag = {}
function LotResultMapPatternFlag:new(id_or_all, patchName)
    return paramPatcher(self, "LotResultMapPatternFlag", 0x20, id_or_all, patchName)
end



function LotResultMapPatternFlag:setUnknown_0(value)
    return self:setU32(0x00, value)
end
function LotResultMapPatternFlag:getUnknown_0(value)
    return self:getU32(0x00, value)
end

function LotResultMapPatternFlag:setPatternId(value)
    return self:setU32(0x04, value)
end
function LotResultMapPatternFlag:getPatternId(value)
    return self:getU32(0x04, value)
end

function LotResultMapPatternFlag:setModifierSet(value)
    return self:setU32(0x08, value)
end
function LotResultMapPatternFlag:getModifierSet(value)
    return self:getU32(0x08, value)
end

function LotResultMapPatternFlag:setModifier(value)
    return self:setU32(0x0C, value)
end
function LotResultMapPatternFlag:getModifier(value)
    return self:getU32(0x0C, value)
end

function LotResultMapPatternFlag:setEventFlag(value)
    return self:setU32(0x10, value)
end
function LotResultMapPatternFlag:getEventFlag(value)
    return self:getU32(0x10, value)
end

function LotResultMapPatternFlag:setPatternSetId(value)
    return self:setU16(0x14, value)
end
function LotResultMapPatternFlag:getPatternSetId(value)
    return self:getU16(0x14, value)
end

function LotResultMapPatternFlag:setTargetBoss(value)
    return self:setU16(0x16, value)
end
function LotResultMapPatternFlag:getTargetBoss(value)
    return self:getU16(0x16, value)
end

function LotResultMapPatternFlag:setRareMap(value)
    return self:setU32(0x18, value)
end
function LotResultMapPatternFlag:getRareMap(value)
    return self:getU32(0x18, value)
end
[disable]
LotResultMapPatternFlag = nil
