{$lua}
if syntaxcheck then return end
[enable]
KeyAssignParam = {}
function KeyAssignParam:new(id_or_all, patchName)
    return paramPatcher(self, "KeyAssignParam", 0x31, id_or_all, patchName)
end



function KeyAssignParam:setPadKeyId(value)
    return self:setU32(0x00, value)
end
function KeyAssignParam:getPadKeyId(value)
    return self:getU32(0x00, value)
end

function KeyAssignParam:setKeyboardModifyKey(value)
    return self:setU32(0x04, value)
end
function KeyAssignParam:getKeyboardModifyKey(value)
    return self:getU32(0x04, value)
end

function KeyAssignParam:setKeyboardKeyId(value)
    return self:setU32(0x08, value)
end
function KeyAssignParam:getKeyboardKeyId(value)
    return self:getU32(0x08, value)
end

function KeyAssignParam:setMouseModifyKey(value)
    return self:setU32(0x0C, value)
end
function KeyAssignParam:getMouseModifyKey(value)
    return self:getU32(0x0C, value)
end

function KeyAssignParam:setMouseKeyId(value)
    return self:setU32(0x10, value)
end
function KeyAssignParam:getMouseKeyId(value)
    return self:getU32(0x10, value)
end

function KeyAssignParam:setShortcutNameId(value)
    return self:setU32(0x14, value)
end
function KeyAssignParam:getShortcutNameId(value)
    return self:getU32(0x14, value)
end

function KeyAssignParam:setShortcutHelpID(value)
    return self:setU32(0x18, value)
end
function KeyAssignParam:getShortcutHelpID(value)
    return self:getU32(0x18, value)
end

function KeyAssignParam:setUnknown_3(value)
    return self:setF32(0x1C, value)
end
function KeyAssignParam:getUnknown_3(value)
    return self:getF32(0x1C, value)
end

function KeyAssignParam:setUnknown_4(value)
    return self:setU32(0x20, value)
end
function KeyAssignParam:getUnknown_4(value)
    return self:getU32(0x20, value)
end

function KeyAssignParam:setUnknown_5(value)
    return self:setU32(0x24, value)
end
function KeyAssignParam:getUnknown_5(value)
    return self:getU32(0x24, value)
end

--dummy8 reserved[8]
[disable]
KeyAssignParam = nil
