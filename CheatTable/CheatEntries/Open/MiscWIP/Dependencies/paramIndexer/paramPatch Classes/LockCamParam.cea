{$lua}
if syntaxcheck then return end
[enable]
LockCamParam = {}
function LockCamParam:new(id_or_all, patchName)
    return paramPatcher(self, "LockCamParam", 0x81, id_or_all, patchName)
end



function LockCamParam:setCamDistTarget(value)
    return self:setF32(0x00, value)
end
function LockCamParam:getCamDistTarget(value)
    return self:getF32(0x00, value)
end

function LockCamParam:setRotRangeMinX(value)
    return self:setF32(0x04, value)
end
function LockCamParam:getRotRangeMinX(value)
    return self:getF32(0x04, value)
end

function LockCamParam:setLockRotXShiftRatio(value)
    return self:setF32(0x08, value)
end
function LockCamParam:getLockRotXShiftRatio(value)
    return self:getF32(0x08, value)
end

function LockCamParam:setChrOrgOffset_Y(value)
    return self:setF32(0x0C, value)
end
function LockCamParam:getChrOrgOffset_Y(value)
    return self:getF32(0x0C, value)
end

function LockCamParam:setChrLockRangeMaxRadius(value)
    return self:setF32(0x10, value)
end
function LockCamParam:getChrLockRangeMaxRadius(value)
    return self:getF32(0x10, value)
end

function LockCamParam:setCamFovY(value)
    return self:setF32(0x14, value)
end
function LockCamParam:getCamFovY(value)
    return self:getF32(0x14, value)
end

function LockCamParam:setChrLockRangeMaxRadius_forD(value)
    return self:setF32(0x18, value)
end
function LockCamParam:getChrLockRangeMaxRadius_forD(value)
    return self:getF32(0x18, value)
end

function LockCamParam:setChrLockRangeMaxRadius_forPD(value)
    return self:setF32(0x1C, value)
end
function LockCamParam:getChrLockRangeMaxRadius_forPD(value)
    return self:getF32(0x1C, value)
end

function LockCamParam:setCloseMaxHeight(value)
    return self:setF32(0x20, value)
end
function LockCamParam:getCloseMaxHeight(value)
    return self:getF32(0x20, value)
end

function LockCamParam:setCloseMinHeight(value)
    return self:setF32(0x24, value)
end
function LockCamParam:getCloseMinHeight(value)
    return self:getF32(0x24, value)
end

function LockCamParam:setCloseAngRange(value)
    return self:setF32(0x28, value)
end
function LockCamParam:getCloseAngRange(value)
    return self:getF32(0x28, value)
end

function LockCamParam:setCloseMaxRadius(value)
    return self:setF32(0x2C, value)
end
function LockCamParam:getCloseMaxRadius(value)
    return self:getF32(0x2C, value)
end

function LockCamParam:setCloseMaxRadius_forD(value)
    return self:setF32(0x30, value)
end
function LockCamParam:getCloseMaxRadius_forD(value)
    return self:getF32(0x30, value)
end

function LockCamParam:setCloseMaxRadius_forPD(value)
    return self:setF32(0x34, value)
end
function LockCamParam:getCloseMaxRadius_forPD(value)
    return self:getF32(0x34, value)
end

function LockCamParam:setBulletMaxRadius(value)
    return self:setF32(0x38, value)
end
function LockCamParam:getBulletMaxRadius(value)
    return self:getF32(0x38, value)
end

function LockCamParam:setBulletMaxRadius_forD(value)
    return self:setF32(0x3C, value)
end
function LockCamParam:getBulletMaxRadius_forD(value)
    return self:getF32(0x3C, value)
end

function LockCamParam:setBulletMaxRadius_forPD(value)
    return self:setF32(0x40, value)
end
function LockCamParam:getBulletMaxRadius_forPD(value)
    return self:getF32(0x40, value)
end

function LockCamParam:setBulletAngRange(value)
    return self:setF32(0x44, value)
end
function LockCamParam:getBulletAngRange(value)
    return self:getF32(0x44, value)
end

function LockCamParam:setLockTgtKeepTime(value)
    return self:setF32(0x48, value)
end
function LockCamParam:getLockTgtKeepTime(value)
    return self:getF32(0x48, value)
end

function LockCamParam:setChrTransChaseRateForNormal(value)
    return self:setF32(0x4C, value)
end
function LockCamParam:getChrTransChaseRateForNormal(value)
    return self:getF32(0x4C, value)
end

--dummy8 pad[48]
[disable]
LockCamParam = nil
