{$lua}
if syntaxcheck then return end
[enable]
ThrowParam = {}
function ThrowParam:new(id_or_all, patchName)
    return paramPatcher(self, "ThrowParam", 0x81, id_or_all, patchName)
end



function ThrowParam:setAtkChrId(value)
    return self:setU32(0x00, value)
end
function ThrowParam:getAtkChrId(value)
    return self:getU32(0x00, value)
end

function ThrowParam:setDefChrId(value)
    return self:setU32(0x04, value)
end
function ThrowParam:getDefChrId(value)
    return self:getU32(0x04, value)
end

function ThrowParam:setDist(value)
    return self:setF32(0x08, value)
end
function ThrowParam:getDist(value)
    return self:getF32(0x08, value)
end

function ThrowParam:setDiffAngMin(value)
    return self:setF32(0x0C, value)
end
function ThrowParam:getDiffAngMin(value)
    return self:getF32(0x0C, value)
end

function ThrowParam:setDiffAngMax(value)
    return self:setF32(0x10, value)
end
function ThrowParam:getDiffAngMax(value)
    return self:getF32(0x10, value)
end

function ThrowParam:setUpperYRange(value)
    return self:setF32(0x14, value)
end
function ThrowParam:getUpperYRange(value)
    return self:getF32(0x14, value)
end

function ThrowParam:setLowerYRange(value)
    return self:setF32(0x18, value)
end
function ThrowParam:getLowerYRange(value)
    return self:getF32(0x18, value)
end

function ThrowParam:setDiffAngMyToDef(value)
    return self:setF32(0x1C, value)
end
function ThrowParam:getDiffAngMyToDef(value)
    return self:getF32(0x1C, value)
end

function ThrowParam:setThrowTypeId(value)
    return self:setU32(0x20, value)
end
function ThrowParam:getThrowTypeId(value)
    return self:getU32(0x20, value)
end

function ThrowParam:setAtkAnimId(value)
    return self:setU32(0x24, value)
end
function ThrowParam:getAtkAnimId(value)
    return self:getU32(0x24, value)
end

function ThrowParam:setDefAnimId(value)
    return self:setU32(0x28, value)
end
function ThrowParam:getDefAnimId(value)
    return self:getU32(0x28, value)
end

function ThrowParam:setEscHp(value)
    return self:setU16(0x2C, value)
end
function ThrowParam:getEscHp(value)
    return self:getU16(0x2C, value)
end

function ThrowParam:setSelfEscCycleTime(value)
    return self:setU16(0x2E, value)
end
function ThrowParam:getSelfEscCycleTime(value)
    return self:getU16(0x2E, value)
end

function ThrowParam:setSphereCastRadiusRateTop(value)
    return self:setU16(0x30, value)
end
function ThrowParam:getSphereCastRadiusRateTop(value)
    return self:getU16(0x30, value)
end

function ThrowParam:setSphereCastRadiusRateLow(value)
    return self:setU16(0x32, value)
end
function ThrowParam:getSphereCastRadiusRateLow(value)
    return self:getU16(0x32, value)
end

function ThrowParam:setPadType(value)
    return self:setU8(0x34, value)
end
function ThrowParam:getPadType(value)
    return self:getU8(0x34, value)
end

function ThrowParam:setAtkEnableState(value)
    return self:setU8(0x35, value)
end
function ThrowParam:getAtkEnableState(value)
    return self:getU8(0x35, value)
end

function ThrowParam:setThrowFollowingType(value)
    return self:setU8(0x36, value)
end
function ThrowParam:getThrowFollowingType(value)
    return self:getU8(0x36, value)
end

--dummy8 pad2[1]

function ThrowParam:setThrowType(value)
    return self:setU8(0x38, value)
end
function ThrowParam:getThrowType(value)
    return self:getU8(0x38, value)
end

function ThrowParam:setSelfEscCycleCnt(value)
    return self:setU8(0x39, value)
end
function ThrowParam:getSelfEscCycleCnt(value)
    return self:getU8(0x39, value)
end

function ThrowParam:setDmyHasChrDirType(value)
    return self:setU8(0x3A, value)
end
function ThrowParam:getDmyHasChrDirType(value)
    return self:getU8(0x3A, value)
end

function ThrowParam:setIsTurnAtker(value)
    return self:setBinary(0x3B, 0, value, 1)
end

function ThrowParam:getIsTurnAtker()
    return self:getBinary(0x3B, 0, value, 1)
end

function ThrowParam:setIsSkipWepCate(value)
    return self:setBinary(0x3B, 1, value, 1)
end

function ThrowParam:getIsSkipWepCate()
    return self:getBinary(0x3B, 1, value, 1)
end

function ThrowParam:setIsSkipSphereCast(value)
    return self:setBinary(0x3B, 2, value, 1)
end

function ThrowParam:getIsSkipSphereCast()
    return self:getBinary(0x3B, 2, value, 1)
end

function ThrowParam:setIsEnableCorrectPos_forThrowAdjust(value)
    return self:setBinary(0x3B, 3, value, 1)
end

function ThrowParam:getIsEnableCorrectPos_forThrowAdjust()
    return self:getBinary(0x3B, 3, value, 1)
end

function ThrowParam:setIsEnableThrowFollowingFallAssist(value)
    return self:setBinary(0x3B, 4, value, 1)
end

function ThrowParam:getIsEnableThrowFollowingFallAssist()
    return self:getBinary(0x3B, 4, value, 1)
end

function ThrowParam:setIsEnableThrowFollowingFeedback(value)
    return self:setBinary(0x3B, 5, value, 1)
end

function ThrowParam:getIsEnableThrowFollowingFeedback()
    return self:getBinary(0x3B, 5, value, 1)
end

--dummy8 pad0:2

function ThrowParam:setAtkSorbDmyId(value)
    return self:setU16(0x3C, value)
end
function ThrowParam:getAtkSorbDmyId(value)
    return self:getU16(0x3C, value)
end

function ThrowParam:setDefSorbDmyId(value)
    return self:setU16(0x3E, value)
end
function ThrowParam:getDefSorbDmyId(value)
    return self:getU16(0x3E, value)
end

function ThrowParam:setDist_start(value)
    return self:setF32(0x40, value)
end
function ThrowParam:getDist_start(value)
    return self:getF32(0x40, value)
end

function ThrowParam:setDiffAngMin_start(value)
    return self:setF32(0x44, value)
end
function ThrowParam:getDiffAngMin_start(value)
    return self:getF32(0x44, value)
end

function ThrowParam:setDiffAngMax_start(value)
    return self:setF32(0x48, value)
end
function ThrowParam:getDiffAngMax_start(value)
    return self:getF32(0x48, value)
end

function ThrowParam:setUpperYRange_start(value)
    return self:setF32(0x4C, value)
end
function ThrowParam:getUpperYRange_start(value)
    return self:getF32(0x4C, value)
end

function ThrowParam:setLowerYRange_start(value)
    return self:setF32(0x50, value)
end
function ThrowParam:getLowerYRange_start(value)
    return self:getF32(0x50, value)
end

function ThrowParam:setDiffAngMyToDef_start(value)
    return self:setF32(0x54, value)
end
function ThrowParam:getDiffAngMyToDef_start(value)
    return self:getF32(0x54, value)
end

function ThrowParam:setJudgeRangeBasePosDmyId1(value)
    return self:setU32(0x58, value)
end
function ThrowParam:getJudgeRangeBasePosDmyId1(value)
    return self:getU32(0x58, value)
end

function ThrowParam:setJudgeRangeBasePosDmyId2(value)
    return self:setU32(0x5C, value)
end
function ThrowParam:getJudgeRangeBasePosDmyId2(value)
    return self:getU32(0x5C, value)
end

function ThrowParam:setAdsrobModelPosInterpolationTime(value)
    return self:setF32(0x60, value)
end
function ThrowParam:getAdsrobModelPosInterpolationTime(value)
    return self:getF32(0x60, value)
end

function ThrowParam:setThrowFollowingEndEasingTime(value)
    return self:setF32(0x64, value)
end
function ThrowParam:getThrowFollowingEndEasingTime(value)
    return self:getF32(0x64, value)
end

--dummy8 pad1[24]
[disable]
ThrowParam = nil
