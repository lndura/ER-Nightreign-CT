{$lua}
--[[

Credits (aside from listed contributors on github):
    Tremwill and Sfix, for the "Singleton Finder".
    ChainFailure and Axd1x8a, for explainging things such as, but not limited to reversing with Ghidra and Fromsoftware's game logic.
    Dasaav, for "getPortableExecutable(bool)" and "proDebug".
    InuNorii, for "addCurrency", also known as "AddSoul".

--]]

if syntaxcheck then return end
[ENABLE]
Table = {}
Table.game = {
    "start_protected_game.exe",
    "nightreign.exe",
}
Table.max_ce_version = 7.5
Table.min_ce_version = 7.4
Table.game_version = "1.1.3"
Table.repository = ""
Table.version = nil

function Table:launch(...)

    for index, processName in ipairs(self.game) do
        openProcess(processName)
        if getAddressSafe(process) then
            break
        end
    end

    if not getAddressSafe(process) then
        return pfError("The process couldn't be opened.")
    end

    local ce_version = getCEVersion()
    if ce_version < self.min_ce_version or ce_version > self.max_ce_version then
        pfError("Incompatible CE version: %f (must be between %f and %f", ce_version, self.min_ce_version, self.max_ce_version)
    end

    local game_version = getGameVersion():__tostring()
    if game_version ~= self.game_version then
        pfError("Game version %s is not supported.\nUse version %s instead.", game_version, self.game_version)
    end

    local required_files = {
        "luaclient-x86_64.dll",
        "tcc64-64.dll"
    }

    for _,file in pairs(required_files) do
        if not getFileList(getCheatEngineDir(),file)[1] then
            local e = string.format("'%s' not present in Cheat Engine folder.\nReinstall Cheat Engine.\nDo not compile it yourself if you don't know what you're doing.",file)
            ShowMessage(e)
            error(e,2)
        end
    end

    local settings = getSettings(nil)

    if settings["Use dbk32 QueryMemoryRegionEx"] == "1" then
        local title = "Incompatible CE kernel setting"
        local text = "It appears that you have custom CE kernel routines enabled for 'Query memory region routines'.\nThis setting is not compatible. Selecting 'Ok' will turn it off to allow the table to function."
        if messageDialog(title, text, mtWarning, mbOK, mbCancel)==mrOK then
            settings["Use dbk32 QueryMemoryRegionEx"] = 0
            reloadSettingsFromRegistry()
        else
            error(t,2)
        end
    end

    local badFunctions = {
       "encodeFunction",
       "decodeFunction",
       "shellExecute",
    }

    for _,fnName in ipairs(badFunctions) do
        local fn = _G[fnName]
        if _G[fnName] then
            unregisterLuaFunctionHighlight(fnName)
            _G[fnName] = nil
        end
    end

    local function launchArgs(array)
        for _,arg in pairs(array) do
            local argType = type(arg)
            if argType == 'function' then
                arg()
            elseif argType == 'table' then
                launchArgs(arg)
            end
        end
    end
    local args = {...}
    return launchArgs(args)
end

---@class Semver
---@field major integer
---@field minor integer
---@field release integer
---@field build integer

---@param o table | string
---@return Semver
Semver = {}

function Semver:new(o)
    if type(o) == "string" then
        return Semver:fromString(o)
    end
    o = {
        major = o.major or 0,
        minor = o.minor or 0,
        release = o.release or 0,
        build = o.build or 0
    }
    setmetatable(o, self)
    self.__index = self
    return o
end

---@param str string
function Semver:fromString(str)
    local verParts = {}
    local remaining = str:gsub("(%d+)%.?", function(m)
        table.insert(verParts, tonumber(m, 10))
        return ""
    end)

    if #verParts == 0 or remaining ~= "" then
        error(("%s is not a valid semver string"):format(str))
    end
    return Semver:new{
        major = verParts[1] or 0,
        minor = verParts[2] or 0,
        release = verParts[3] or 0,
        build = verParts[4] or 0
    }
end

---@return integer
function Semver:asU64()
    return (self.major << 48 ) | (self.minor << 32) | (self.release << 16) | (self.build)
end

function Semver:__tostring()
    local noBuild = ("%d.%d.%d"):format(self.major, self.minor, self.release)
    return self.build == 0 and noBuild or noBuild .. '.' .. tostring(self.build)
end

function Semver:__eq(other)
    if getmetatable(other) ~= Semver then
        return false
    end
    return self:asU64() == other:asU64()
end

---@param other Semver
function Semver:__lt(other)
    return self:asU64() < other:asU64()
end

---@param other Semver
function Semver:__le(other)
    return self:asU64() <= other:asU64()
end

registerLuaFunctionHighlight("pfError")
function pfError(...)
    local err = string.format(...)
    print(err)
    return error(err)
end

registerLuaFunctionHighlight("getGameVersion")
function getGameVersion()
    local success, err, semver = pcall(function()
        return getFileVersion(enumModules()[1].PathToFile)
    end)
    if not success then
        print("Failed to read game process.")
        pfError(err)
    end
    return Semver:new({
        major = 1,
        minor = 10*(semver.major - 1) + semver.minor,
        release = semver.release,
        build = semver.build
    })
end

-- Checks whether an address or a symbol is within the process module
-- can be used to determine if an input represents a valid address
-- returns the address, or false if it is outside, or nil on lookup failure
-- Examples:
-- local address = getAddressProcessSafe("someSymbol")
-- local address = getAddressProcessSafe("DarkSoulsIII.exe+123456")
-- if getAddressProcessSafe(someVar) then print("valid address") end
-- assert(getAddressProcessSafe(0x1000) == false)
-- @param key | number | string | other
registerLuaFunctionHighlight("getAddressProcessSafe")
local function getAddressProcessSafe(key)
  if not getAddressSafe(process) then return end
  local address = getAddressSafe(key)
  if address == nil then return nil end
  return address >= getAddress(process) and address <= getAddress(process) + getModuleSize(process) and address
end

registerLuaFunctionHighlight("inArray")
function inArray(array, item)
  for _,value in pairs(array) do
    if value == item then
      return true
    end
  end
  return false
end

registerLuaFunctionHighlight("setBit")
registerLuaFunctionHighlight("writeBit")
function setBit(addr_str, bit, value)
  local offset = bit // 8
  local remainder = bit % 8
  local bshift = 1 << remainder
  local addr = getAddress(addr_str) + offset
  return writeByte(addr, readByte(addr) & ~bshift | (bshift & -(value % 2)))
end
writeBit = setBit

registerLuaFunctionHighlight("getBit")
registerLuaFunctionHighlight("readBit")
function getBit(addr_str, bit)
    if type(bit) ~= "number" then
        return nil
    end

    local index = bit >> 3
    local address = getAddressSafe(addr)
    if address then
        local byte = readByte(address + index)
        if byte then
            return (byte >> (bit & 7)) & 1
        end
    end
    return nil
end
readBit = getBit

local fnDerefs = {
    {"writeBit", "readBit", "U1"},
    {"writeByte","readByte", "U8"},
    {"writeSmallInteger","readSmallInteger", "U16"},
    {"writeInteger","readInteger", "U32"},
    {"writeFloat","readFloat", "F32"},
    {"writeQword","readQword","U64"},
}

for _,fnDeref in ipairs(fnDerefs) do
    local gWrite, gRead, name = fnDeref[1], fnDeref[2], fnDeref[3]
    local write, read = _G[gWrite], _G[gRead]
    if write and read then
        local writeName = "write" .. name
        registerLuaFunctionHighlight(writeName)
        _G[writeName] = write

        local readName = "read" .. name
        registerLuaFunctionHighlight(readName)
        _G[readName] = read

    end
end

registerLuaFunctionHighlight("getPortableExecutable")
function getPortableExecutable(bool)
    local game = getAddressSafe(process)

    if not game or game == 0 then
        return nil
    end

    local offset = readInteger(game + 0x3C)
    local header = game + offset
    local sectionSize = 0x28
    local sectionNum = readShortInteger(header + 0x6)

    if sectionNum <= 0 then
        return nil
    end

    local first = header + readShortInteger(header + 0x14) + 0x18
    local last = first + sectionNum * sectionSize - sectionSize

    local modules = {addr = game, name = process, size = 0, stop = 0x7fffffffffff}
    for section = first, last, sectionSize do
        local name = readString(section)
        local addr = getAddressSafe(process .. name) or game + readInteger(section + 0xC)
        if name and addr then
            if bool then
                name = string.sub(name, 2, #name)
            end
            local size = readInteger(section + 0x8)
            modules.size = modules.size + size
            modules[name] = {
                addr = addr,
                stop = addr + size,
                size = size,
            }
        end
    end
    modules.stop = modules.addr + modules.size
    return modules
end

registerLuaFunctionHighlight("inRegion")
function inRegion(address, region)
    return address >= region.addr and address <= region.stop
end

function enableRecord(id, delay, sync)
    local record = getAddressList().getMemoryRecordByID(id)
    if(record ~= nil) then
        if sync then
            Sleep(delay)
            record.Active = true
            return
        end
        local t = createTimer(getMainForm())
        t.Interval = delay or 100
        t.OnTimer = function()
            t.destroy()
            record.Active = true
        end
    else
        print("Record with ID "..id.." doesn't exist.")
    end
end

function disableRecord(id, delay, sync)
    local record = getAddressList().getMemoryRecordByID(id)
    if(record ~= nil) then
        if sync then
            Sleep(delay)
            record.Active = false
            return
        end
        local t = createTimer(getMainForm())
        t.Interval = delay or 100
        t.OnTimer = function()
            t.destroy()
            record.Active = false
        end
    else
        print("Record with ID "..id.." doesn't exist.")
    end
end

-- Disables memrec after specified amount of milliseconds
-- or byte at given address becomes 1
-- or given function returns true.
-- Accepts id, description or MemoryRecord instance.
-- ametalon, 2020-07-15
-- Examples:
--   disableMemrec(memrec)
--     disable current memrec
--   disableMemrec(13, 1000)
--     disable memrec with ID = 13 in one second
--   disableMemrec("Curse Dagger", 500)
--     disable "Curse Dagger" in half a second
--   disableMemrec("Slow script", "slow_script_finished")
--     disable "Slow script" when it sets byte at address "slow_script_finished" to 1
--   disableMemrec("Funny meme", function() return readInteger('an_address') == 42 end)
--     disable "Funny meme" when an address in memory takes a specific value
-- @param memrec, MemoryRecord | number | string
-- @param delay, number | string | function, default 100,
--   milliseconds to wait before disabling
--   or memory address to check when that byte becomes 1
--   or function that returns true when memrec should be disabled.
function disableMemrec(memrec, delay)
  local memrecType = type(memrec)
  if memrecType == "userdata" then
    -- noop, we assume it is already MemoryRecord
  elseif memrecType == "string" then
    memrec = getAddressList().getMemoryRecordByDescription(memrec)
  elseif memrecType == "number" then
    memrec = getAddressList().getMemoryRecordByID(memrec)
  end
  if not memrec then return end
  local t = createTimer(nil)
  delay = delay or 100
  local delayType = type(delay)
  if delayType == "string" then
    t.interval = 100
    t.onTimer = function(t)
      if readBytes(delay, 1) == 1 then
        t.destroy()
        memrec.active = false
      end
    end
  elseif delayType == "number" then
    -- minimum delay is 0.1 seconds
    t.interval = math.max(delay, 100)
    t.onTimer = function(t)
      t.destroy()
      memrec.active = false
    end
  elseif delayType == "function" then
    t.interval = 100
    t.onTimer = function(t)
      if delay() then
        t.destroy()
        memrec.active = false
      end
    end
  end
end

Symbols = {}
function registerSymbols()

    local AOBRefs = {
        {name = "GameMan", AOB = "48 8B 05 ?? ?? ?? ?? 80 B8 ?? ?? ?? ?? 0D 0F 94 C0 C3"},
        {name = "GameDataMan", AOB = "48 8B 05 ?? ?? ?? ?? 48 85 C0 74 08 48 8B 80 ?? ?? ?? ?? C3 C3"},
    }

    local FD4_Singleton_Pattern_Data = {
        "48 8b ?? ?? ?? ?? ?? ",  --  0 MOV REG, [MEM]
        "48 85 ?? ",              --  7 TEST REG, REG
        "75 2e ",                 -- 10 JNZ +2e
        "48 8d 0d ?? ?? ?? ?? ",  -- 12 LEA RCX, [runtime_class_metadata]
        "e8 ?? ?? ?? ?? ",        -- 19 CALL get_singleton_name
        "4c 8b c8 ",              -- 24 MOV R9, RAX
        "4c 8d 05 ?? ?? ?? ?? ",  -- 27 LEA R8, [%s:未初期化のシングルトンにアクセスしました]
        "ba ?? ?? 00 00 ",        -- 34 MOV EDX, 0x0000????
        "48 8d 0d ?? ?? ?? ?? ",  -- 39 LEA RCX, [file_path]
        "e8 ?? ?? ?? ??",         -- 46 CALL log_thunk
    }

    local FD4_Singleton_Pattern = table.concat(FD4_Singleton_Pattern_Data, ' ')

    local function registerAobScanResult(name, inputAddr, offset)
        local dissAddr = offset and inputAddr and inputAddr + offset or inputAddr
        if dissAddr then
            local d = createDisassembler()
            if d.disassemble(dissAddr) then
                local dt = d.getLastDisassembleData()
                local address = dt.parameters:match("%[(.-)%]")
                if address then
                    address = tonumber(address, 16)
                    if address then
                        Symbols[name] = address
                        registerSymbol(name, address, true)
                        return address
                    end
                end
            end
        end
        printf("symbol %s not found", symbolName)
    end

    local function getNullCheckInfo(start)
        return {
            addr = start + 07 + readInteger(start + 03),
            rptr = start + 19 + readInteger(start + 15),
            name = start + 24 + readInteger(start + 20),
            file = start + 46 + readInteger(start + 42),
        }
    end

    local progress = getMainForm().ProgressBar
    local memscan = createMemScan(progress)
    memscan.OnlyOneResult = true
    memscan.returnOnlyOneResult = true
    local foundList = createFoundList(memscan)
    local success, err = pcall(
      function(scan, pattern, others)
        local executable = getPortableExecutable(true)
        if executable == nil then
            error("Portable Executable couldn't be extracted.")
        end

        if others then
          for index,symbol in ipairs(others) do
              scan.firstScan(soExactValue, vtByteArray, rtRounded, symbol.AOB, nil, executable.addr, executable.stop, "+X", fsmNotAligned, nil, true, true, false, false)
              scan.waitTillDone()
              local result = scan.getOnlyResult()
              if result then
                  registerAobScanResult(symbol.name, result, symbol.offset)
              end
          end
        end

        scan.OnlyOneResult = false
        scan.returnOnlyOneResult = false
        scan.firstScan(soExactValue, vtByteArray, rtRounded, pattern, nil, executable.text.addr, executable.stop, "+X", fsmNotAligned, nil, true, true, false, false)
        scan.waitTillDone()
        local candidates = scan.getAttachedFoundlist()
        if candidates then
            candidates.initialize()
            local isAddrFound = {}
            local total = candidates.getCount() - 1
            for index = 0,total,1 do
                local address = tonumber(candidates[index], 16)
                local result = getNullCheckInfo(address)

                if not isAddrFound[result.addr] then
                    isAddrFound[result.addr] = true

                    -- Check if runtime_class_ptr is in range
                    if not inRegion(result.rptr, executable.data) then
                        goto continue
                    end

                    -- Check if FD4Singleton header path is there
                    if not inRegion(result.file, executable.rdata) then
                        goto continue
                    end

                    -- Check if get_singleton_name() is in range.
                    if not inRegion(result.name, executable.text) then
                        goto continue
                    end

                    -- Check if static address in data section
                    if not inRegion(result.addr, executable.data) then
                        goto continue
                    end

                    -- Check if FD4Singleton path string ends with correct header name
                    local filepath = readString(result.file, 256)
                    local filepath_len = #filepath
                    if filepath_len < 10 or filepath_len == 256 then
                        goto continue
                    end

                    local filepath_end = string.sub(filepath, filepath_len - 13, filepath_len)

                    if filepath_end ~= "FD4Singleton.h" then
                        goto continue
                    end

                    local namePtr = executeCodeEx(0, -1, result.name, result.rptr)
                    if namePtr and namePtr ~= 0 then
                      local symbolName = readString(namePtr, 64)
                      local name = symbolName:match(".*:(.*)") or symbolName
                      if not Symbols[name] and name:gsub(' ', '') ~= '' then
                          Symbols[name] = result.addr
                          registerSymbol(name, result.addr, false)
                      end
                    end
                    ::continue::
                end
            end
            candidates.deinitialize()
        end
      end, memscan, FD4_Singleton_Pattern, AOBRefs)
    memscan.destroy()
    foundList.destroy()
    if not success then
        print('Singleton Finder Unsuccessfull:')
        pfError(err)
    end
end

local function activateDependencies()
    local dependencies = getAddressList().getMemoryRecordByDescription("Dependencies")
    if dependencies then
        for i = 0, dependencies.Count - 1, 1 do
            dependencies[i].Active = true
        end
    end
end

Table:launch(registerSymbols, activateDependencies)

[DISABLE]
for symbol,address in pairs(Symbols) do
    unregisterSymbol(symbol)
end
Symbols = nil
