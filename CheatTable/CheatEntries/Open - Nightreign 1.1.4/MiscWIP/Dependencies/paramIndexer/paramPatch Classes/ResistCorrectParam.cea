{$lua}
if syntaxcheck then return end
[enable]
ResistCorrectParam = {}
function ResistCorrectParam:new(id_or_all, patchName)
    return paramPatcher(self, "ResistCorrectParam", 0x2C, id_or_all, patchName)
end



function ResistCorrectParam:setAddPoint1(value)
    return self:setF32(0x00, value)
end
function ResistCorrectParam:getAddPoint1(value)
    return self:getF32(0x00, value)
end

function ResistCorrectParam:setAddPoint2(value)
    return self:setF32(0x04, value)
end
function ResistCorrectParam:getAddPoint2(value)
    return self:getF32(0x04, value)
end

function ResistCorrectParam:setAddPoint3(value)
    return self:setF32(0x08, value)
end
function ResistCorrectParam:getAddPoint3(value)
    return self:getF32(0x08, value)
end

function ResistCorrectParam:setAddPoint4(value)
    return self:setF32(0x0C, value)
end
function ResistCorrectParam:getAddPoint4(value)
    return self:getF32(0x0C, value)
end

function ResistCorrectParam:setAddPoint5(value)
    return self:setF32(0x10, value)
end
function ResistCorrectParam:getAddPoint5(value)
    return self:getF32(0x10, value)
end

function ResistCorrectParam:setAddRate1(value)
    return self:setF32(0x14, value)
end
function ResistCorrectParam:getAddRate1(value)
    return self:getF32(0x14, value)
end

function ResistCorrectParam:setAddRate2(value)
    return self:setF32(0x18, value)
end
function ResistCorrectParam:getAddRate2(value)
    return self:getF32(0x18, value)
end

function ResistCorrectParam:setAddRate3(value)
    return self:setF32(0x1C, value)
end
function ResistCorrectParam:getAddRate3(value)
    return self:getF32(0x1C, value)
end

function ResistCorrectParam:setAddRate4(value)
    return self:setF32(0x20, value)
end
function ResistCorrectParam:getAddRate4(value)
    return self:getF32(0x20, value)
end

function ResistCorrectParam:setAddRate5(value)
    return self:setF32(0x24, value)
end
function ResistCorrectParam:getAddRate5(value)
    return self:getF32(0x24, value)
end
[disable]
ResistCorrectParam = nil
