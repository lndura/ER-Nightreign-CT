{$lua}
if syntaxcheck then return end
[enable]
BehaviorParam = {}
function BehaviorParam:new(id_or_all, patchName)
    return paramPatcher(self, "BehaviorParam", 0x21, id_or_all, patchName)
end



function BehaviorParam:setVariationId(value)
    return self:setU32(0x00, value)
end
function BehaviorParam:getVariationId(value)
    return self:getU32(0x00, value)
end

function BehaviorParam:setBehaviorJudgeId(value)
    return self:setU32(0x04, value)
end
function BehaviorParam:getBehaviorJudgeId(value)
    return self:getU32(0x04, value)
end

function BehaviorParam:setEzStateBehaviorType_old(value)
    return self:setU8(0x08, value)
end
function BehaviorParam:getEzStateBehaviorType_old(value)
    return self:getU8(0x08, value)
end

function BehaviorParam:setRefType(value)
    return self:setU8(0x09, value)
end
function BehaviorParam:getRefType(value)
    return self:getU8(0x09, value)
end

--dummy8 pad2[2]

function BehaviorParam:setRefId(value)
    return self:setU32(0x0C, value)
end
function BehaviorParam:getRefId(value)
    return self:getU32(0x0C, value)
end

function BehaviorParam:setConsumeSA(value)
    return self:setF32(0x10, value)
end
function BehaviorParam:getConsumeSA(value)
    return self:getF32(0x10, value)
end

function BehaviorParam:setStamina(value)
    return self:setU32(0x14, value)
end
function BehaviorParam:getStamina(value)
    return self:getU32(0x14, value)
end

function BehaviorParam:setConsumeDurability(value)
    return self:setU32(0x18, value)
end
function BehaviorParam:getConsumeDurability(value)
    return self:getU32(0x18, value)
end

function BehaviorParam:setCategory(value)
    return self:setU8(0x1C, value)
end
function BehaviorParam:getCategory(value)
    return self:getU8(0x1C, value)
end

function BehaviorParam:setHeroPoint(value)
    return self:setU8(0x1D, value)
end
function BehaviorParam:getHeroPoint(value)
    return self:getU8(0x1D, value)
end

--dummy8 pad1[2]
[disable]
BehaviorParam = nil
