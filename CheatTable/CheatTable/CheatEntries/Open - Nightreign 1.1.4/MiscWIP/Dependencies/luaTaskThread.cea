{$lua}
if syntaxcheck then return end
[enable]
luaTask = {}
luaTask.list = {}

function luaTask.validate(task)
  local taskType = type(task)
  if taskType ~= 'function' then
    if taskType == 'number' then
      local validTask = task >= getAddress(process) and task <= getAddress(process) + getModuleSize(process)
      if not validTask then
        return pfError("Function at %016X cannot be executed safely.", task)
      end
    else
      return pfError("Invalid argument type: %s", taskType)
    end
  end
  return true
end

function luaTask.insert(name, task)
  if luaTask.validate(task) then
    luaTask.list[name] = task
  end
  return false
end

function luaTask.remove(name)
  if luaTask.list[name] then
    luaTask.list[name] = nil
    return true
  end
  return false
end

luaTaskThread = createNativeThread(
  function(self, record, taskList)
    record.Active = true
    local isFunction = "function"
    while record.Active and getAddressSafe(process) do
      for name,task in pairs(taskList) do
        if type(task) == isFunction then
          local success, err = pcall(task)
          if not success then
            print(err)
          end
        else
          executeCode(task)
        end
      end

      local CSLoadBalancerImp = readPointer("CSLoadBalancer")
      if CSLoadBalancerImp then
        -- wait 1 frame
        local FrameRate = readFloat(CSLoadBalancerImp + 8)
        local TaskDelay = 1000 // FrameRate
        sleep(TaskDelay)
      else
        -- wait 1 frame (30 fps)
        sleep(34)
      end
    end
    print("luaTaskThread killed.")
  end, memrec, luaTask.list
)
luaTaskThread.name = "luaTaskThread"
[disable]
luaTask = nil
