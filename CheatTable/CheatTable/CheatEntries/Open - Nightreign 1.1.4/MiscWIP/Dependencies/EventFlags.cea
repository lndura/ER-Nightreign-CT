{  Uses Dasaav's EventFlag code from TGA.
}
{$lua}
if syntaxcheck then return end
[ENABLE]

ef = {
    flag = allocateMemory(4),
    cache = {},
    dbg = {},
}

function ef:getAddr()
    return self.address
end

function ef:getBitIndex()
    return self.index
end

function ef:getBitMask()
    return self.mask
end

function ef:isExist()
    return readByte(self.address) ~= nil
end

function ef:getState()
    local byte = readByte(self.address)
    if byte then
        local mask = self.mask
        --local state = (byte & mask) ~= 0
        --return state and 1 or 0
        return (byte & mask)
    end
    return nil
end

function ef:setState(state)
    local address = self.address
    local byte = readByte(address)
    if byte then
        local mask = self.mask
        if state == false or state == 0 then
            byte = byte & ~mask
        else
            byte = byte | mask
        end
        return writeByte(address, byte)
    end
    return false
end

function ef:switchState()
    local address = self.address
    local byte = readByte(address)
    if byte then
        local mask = self.mask
        if (byte & mask) == 0 then
            byte = byte & ~mask
        else
            byte = byte | mask
        end
        return writeByte(address, byte)
    end
    return false
end

function ef:new(address, bit)
    local o = {
        address = address,
        index = bit,
        mask = 1 << (bit or 0)
    }
    self.__index = self
    setmetatable(o, self)
    return o
end

local cache = ef.cache
local function ef_binSearch(EventFlagImp, block)
    if cache[block] then
        return cache[block]
    end

    local tree = readPointer(EventFlagImp + 0x38)
    local node = readPointer(tree + 0x8)

	while readByte(node + 0x19) == 0 do
		local nodeBlock = readInteger(node + 0x20)
		if nodeBlock < block then
            -- right
			node = readPointer(node + 0x10)
		elseif nodeBlock == block then
            -- stop
			break
		else
            -- left
			node = readPointer(node)
		end
	end

	if readInteger(node + 0x20) == block then
        local blockInfo = node + 0x28
        cache[block] = blockInfo
		return blockInfo
	end
    return nil
end

local EventFlagImp = readPointer("CSEventFlagMan")
if not EventFlagImp then
    pfError("ef: EventFlagImp not found.")
end

-- this is always #1000.
local EVENT_FLAG_MOD = readInteger(EventFlagImp + 0x1C)

function getEventFlag(flag)
    local typ = type(flag)
    if typ == 'number' and 0 <= flag then
        local EventFlagImp = readPointer("CSEventFlagMan")
        if not EventFlagImp then
            pfError("ef: EventFlagImp not found.")
        end

        local block = flag // EVENT_FLAG_MOD
        local blockInfo = ef_binSearch(EventFlagImp, block)

        if blockInfo then
            local index = flag - block * EVENT_FLAG_MOD
	        local mode = readInteger(blockInfo)
	        local addr = readPointer(blockInfo + 0x8)

	        if mode == 1 then
		        local blockSize = readInteger(EventFlagImp + 0x20)
		        local blocks = readPointer(EventFlagImp + 0x28)
		        local blockIndex = addr & 0xFFFFFFFF
		        addr = blocks + blockIndex * blockSize
	        elseif mode ~= 2 or mode == 0 then
                local o = ef:new(nil, nil)
                return o
	        end

            local address = addr + (index // 8)
            local bit = 7 - (index & 7)

            local o = ef:new(address, bit)
            return o
        end

        local o = ef:new(nil, nil)
        return o
    else
        pfError("ef: invalid flag, %s:%s", typ, tostring(flag))
    end
end

function setEventFlagList(list, state)
    local state = state and state ~= 0 and 1 or 0
    local count = #list
    for i = 1, count, 1 do
        local flag = list[i]
        local EventFlagImp = readPointer("CSEventFlagMan")
        if not EventFlagImp then
            pfError("EventFlag: EventFlagImp not found.")
        end

        local mod = readInteger(EventFlagImp + 0x1C)

        local block = flag // mod
        local blockInfo = ef_binSearch(EventFlagImp, block)

        if blockInfo then
            local index = flag - block * mod
	        local mode = readInteger(blockInfo)
	        local addr = readPointer(blockInfo + 0x8)

	        if mode == 1 then
		        local blockSize = readInteger(EventFlagImp + 0x20)
		        local blocks = readPointer(EventFlagImp + 0x28)
		        local blockIndex = addr & 0xFFFFFFFF
		        addr = blocks + blockIndex * blockSize
	        elseif mode ~= 2 or mode == 0 then
                pfError("EventFlag: invalid mode for Union: %s", tostring(mode))
	        end

            local address = addr + (index // 8)
            local bit = 7 - (index % 7)
            local mask = 1 << bit
            local byte = readByte(address)
            if state then
                byte = byte | mask
            else
                byte = byte & ~mask
            end
        else
            pfError("EventFlag: no block found for flag %s", tostring(flag))
        end
    end
end

local setEventFlag_aob = "48 89 5c 24 ?? 44 8b 49 ?? 44 8b d2 33 d2 41 8b c2 41 f7 f1 4c 8b d9 41 8b d8 48 8b 49 ??"
local setEventFlag = AOBScanModuleUnique(process, setEventFlag_aob)

function dbgSetEventFlag(flag, state)
    local state = state and state ~= 0 and 1 or 0
    local EventFlagImp = readPointer("CSEventFlagMan")
    if not EventFlagImp then
        pfError("EventFlag: EventFlagImp not found.")
    end
    return executeCodeEx(0, 100, setEventFlag, EventFlagImp, flag, state)
end

local ignoreFlags = {

}

function EventFlagBreakpoint()
    if ef.dbgType == 1 then
        if not ef.dbg[EDX] then
            ef.dbg[EDX] = {
                enabled = 0,
                disabled = 0,
                time = "",
            }
        end
        local dbg = ef.dbg[EDX]
        dbg.time = os.date("%X")
        if R8 > 0 then
           dbg.enabled = dbg.enabled + 1
        else
           dbg.disabled = dbg.disabled + 1
        end
    elseif ef.dbgType == 2 then

    else
        local bool = tostring(R8 > 0)
        print(EDX .. " has changed to " .. bool)
    end
end

function setEventFlagDbg(state, outputtype)
    local breakpointActive = false
    local breakpoints = debug_getBreakpointList()
    if not breakpoints then
        pfError("debugger not attached.")
    end
    for index, address in ipairs(breakpoints) do
        if address == setEventFlag then
            breakpointActive = true
            break
        end
    end
    ef.dbgType = outputtype
    if state and not breakpointActive then
        if outputtype == 1 then
            ef.dbg = {}
        end
        debug_setBreakpoint(setEventFlag, EventFlagBreakpoint)
    elseif breakpointActive then
        debug_removeBreakpoint(setEventFlag)
    end
end

[DISABLE]
deAlloc(ef.flag)
ef = nil
